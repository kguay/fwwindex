
.col
  h3.letter A
  ul.index#idx(style='display:none;')

      - var slug = Object.keys(public._data);
      - for(var i=0; i<slug.length; i++) {
        - if( public._data[slug[i]].author != "n/a" ) {
          li
            span.tag #{ public._data[slug[i]].author } 
            span.location #{ public._data[slug[i]].issue }:#{ public._data[slug[i]].page }
        - }
      - }

//- ul
//-   - var slug = Object.keys(public._data);
//-   - for(var i=0; i<Math.min(200,slug.length); i++) {
//-     li #{ public._data[slug[i]].issue }:#{ public._data[slug[i]].page }
//-   - }

style.
  .index {
    list-style-type: none;
    
    // hanging indent
    padding-left: 22px ;
    text-indent: -22px ;
  }
  ul.index {
    break-inside: avoid-column;
    -webkit-column-break-inside: avoid;
  }
  h3.letter{
    font-size: 1.5em;
    //- font-weight: bold;
    margin-top: 0;
    color: #666;
  }
  .col {
      -webkit-column-count: 3; /* Chrome, Safari, Opera */
      -moz-column-count: 3; /* Firefox */
      column-count: 3;
  }
  .tag {
    color: #333;
  }
  .location {
    color: #666;
  }
  .comma::before { 
    content: ", ";
  }
  .more {
    display:none;
  }

// script(src="https://github.com/overset/javascript-natural-sort/blob/master/naturalSort.js", type="text/javascript")

script.
  // from http://stackoverflow.com/questions/4373018/sort-array-of-numeric-alphabetical-elements-natural-sort
  function natSort(as, bs){
      var a, b, a1, b1,
      rx=  /(\d+)|(\D+)/g, rd= /\d/, rz=/^0/;
      if(typeof as=='number' || typeof bs=='number'){
          if(isNaN(as))return 1;
          if(isNaN(bs))return -1;
          return as-bs;
      }
      a= String(as).toLowerCase();
      b= String(bs).toLowerCase();
      if(a=== b) return 0;
      if(!(rd.test(a) && rd.test(b))) return a> b? 1: -1;
      a= a.match(rx);
      b= b.match(rx);
      while(a.length && b.length){
          a1= a.shift();
          b1= b.shift();
          if(a1!== b1){
              if(rd.test(a1) && rd.test(b1)){
                  // I reversed the order of a1 and b1 here to reverse-sort numbers
                  return b1.replace(rz,'.0')- a1.replace(rz,'.0');
                  // return a1.replace(rz,'.0')- b1.replace(rz,'.0');
                  
              }
              else return a1> b1? 1: -1;
          }
      }
      return a.length - b.length;
  }

script.
  function sortUnorderedList(ul, sortDescending) {
    if(typeof ul == "string")
      ul = document.getElementById(ul);

    // Idiot-proof, remove if you want
    if(!ul) {
      alert("The UL object is null!");
      return;
    }

    // Get the list items and setup an array for sorting
    var lis = ul.getElementsByTagName("LI");
    var vals = [];
    
    // Populate the array
    for(var i = 0, l = lis.length; i < l; i++)
      vals.push(lis[i].innerHTML);
      
    
    // Sort it
    vals.sort(natSort);

    // Sometimes you gotta DESC
    if(sortDescending)
      vals.reverse();

    // Change the list on the page
    for(var i = 0, l = lis.length; i < l; i++)
      lis[i].innerHTML = vals[i];
    
  }
  sortUnorderedList("idx");
  
  
  var $last_letter = "a";
  var $last_word = "a";
  var $same_word = 0;
  var $show_more_index = 0;
  $( ".index li" ).each(function( index ) {
        
    // if LETTER is different than last letter
    var $letter = $( this ).text().charAt(0);
    if ( $letter != $last_letter ) {
      var $ul = $(this).parent();
      var $following = $(this).prev().nextAll('li'); // get all following `li` elements

      if ($following.length > 0) {
          // Create a new list, append the `li` elements and add the list
          // after the current list
          $('<ul />', {'class': 'index'}).append($following).insertAfter($ul);
          
          $('<h3 class="letter">' + $letter.toUpperCase() + '</h3>').insertAfter($ul);
          
      }
    }
    $last_letter = $letter;
    
    // if WORD is same as than last word
    var $word = $( this ).text().split(" ")[0];
    if ( $word == $last_word ) {
            
      if ( $same_word > 5 ){
        $(this).prev().append("<span class='location comma more more_"+$show_more_index+"'>" + $(this).text().split(" ").pop() + "</span>");
      }
      else {
        $(this).prev().append("<span class='location comma'>" + $(this).text().split(" ").pop() + "</span>");
      }
      $(this).remove();
      $same_word = $same_word + 1;
    }
    else {
      if ( $same_word > 5 ){
        $(this).prev().append(" <a href='#' id='"+$show_more_index+"' onclick='showMore("+$show_more_index+")'>more</a>");
      }
      $same_word = 0;
      $show_more_index = $show_more_index + 1;
    }
    
    $last_word = $word;
    
  });
  
  $(".index").show();
  
  function showMore(index) {
   if ( $('#'+index).text() == 'less' ){
     $('.more_'+index).css("display","none");
     $('#'+index).text('more');
   }
   else {
     $('.more_'+index).css("display","inline");
     $('#'+index).text('less');
   }
    
  }